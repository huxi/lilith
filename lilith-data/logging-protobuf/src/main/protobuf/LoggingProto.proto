/*
 * Lilith - a log event viewer.
 * Copyright (C) 2007-2009 Joern Huxhorn
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.huxhorn.lilith.logging;

option optimize_for = SPEED;

option java_package = "de.huxhorn.lilith.data.logging.protobuf.generated";
//option java_multiple_files = true;

message EventWrapper {
	optional EventIdentifier event_identifier = 1;
	optional LoggingEvent    event            = 2;
}

message EventIdentifier {
	optional int64            local_id          = 1;
	optional SourceIdentifier source_identifier = 2;
}

message SourceIdentifier {
	optional string identifier           = 1;
	optional string secondary_identifier = 2;
}

message LoggingEvent {
	optional int64                   time_stamp                = 1;
	optional string                  logger_name               = 2;
	optional Level                   level                     = 3;
	optional Message                 message                   = 4;
	optional ThreadInfo              thread_info               = 5;
	repeated StackTraceElement       call_stack_element        = 6;
	optional Throwable               throwable                 = 7;
	optional LoggerContext           logger_context            = 8;
	optional StringMap               mapped_diagnostic_context = 9;
	optional NestedDiagnosticContext nested_diagnostic_context = 10;
	optional Marker                  marker                    = 11;
	optional int64                   sequence_number           = 12;
}

message LoggerContext {
	optional int64     birth_time = 1;
	optional string    name       = 2;
	optional StringMap properties = 3;
}

message ThreadInfo {
	optional int64  id         = 1;
	optional string name       = 2;
	optional int64  group_id   = 3;
	optional string group_name = 4;
}

enum Level {
	TRACE = 1;
	DEBUG = 2;
	INFO  = 3;
	WARN  = 4;
	ERROR = 5;
}


message Message {
	optional string          message_pattern = 1;
	repeated MessageArgument argument        = 2;
}

// this is necessary to support null arguments
message MessageArgument {
	optional string value = 1;
}

message StackTraceElement {
	optional string method_name   = 1;
	optional string class_name    = 2;
	optional string file_name     = 3;
	optional int32  line_number   = 4;
	optional string code_location = 5;
	optional string version       = 6;
	optional bool   exact         = 7;
}

message Throwable {
	optional string            throwable_class     = 1;
	optional string            message             = 2;
	repeated StackTraceElement stack_trace_element = 3;
	optional int32             omitted_elements    = 4;
	optional Throwable         cause               = 5;
}

message NestedDiagnosticContext {
	repeated Message entry = 1;
}

message StringMap {
	repeated StringMapEntry entry = 1;
}

message StringMapEntry {
	required string key   = 1;
	optional string value = 2;
}

message Marker {
	required string name      = 1;
	repeated Marker reference = 2;
}

