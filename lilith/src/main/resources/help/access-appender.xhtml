<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
	PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<title>Using the Lilith Access Appender</title>
	<link href="help.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<p><a href="index.xhtml">ToC</a></p>

<h1><a name="top">Using the Lilith Access Appender</a></h1>

<p>The Lilith Access Appender is a replacement for <tt>ch.qos.logback.access.net.SocketAppender</tt>.
	While LogBACK's appender is stream-based, i.e. it streams access events using an <tt>ObjectOutputStream</tt> the
	Lilith appender is message based, i.e. it sends access events one after the other as single messages.</p>

<p>A message consists of an integer that specifies the number of bytes of the following event, followed by the
	bytes of the serialized event.</p>

<p>This has several benefits:</p>
<ul>
	<li>Sending to multiple remote hosts is supported while the event is only serialized once.</li>
	<li>Events can (and should) be compressed using GZIP.</li>
	<li>The appender supports heartbeat and timeout.
		<ul>
			<li>The event receiver can find out that the event sender connection died if a heartbeat is missing.</li>
			<li>The event sender can find out that the event receiver connection died by means of a timeout</li>
		</ul>
		This means that an application won't stop (at least not for very long) in case of network problems.
	</li>
</ul>

<p>Add the following to your applications <tt>pom.xml</tt> file:</p>
		<pre><tt><![CDATA[<plugin>
  <groupId>org.mortbay.jetty</groupId>
  <artifactId>maven-jetty-plugin</artifactId>
  <configuration>
    <scanIntervalSeconds>10</scanIntervalSeconds>
    <connectors>
      <connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
        <port>8080</port>
        <maxIdleTime>60000</maxIdleTime>
      </connector>
      <connector implementation="org.mortbay.jetty.security.SslSocketConnector">
        <port>8181</port>
        <maxIdleTime>60000</maxIdleTime>
        <keystore>src/main/jetty/keystore</keystore>
        <password>testing</password>
        <keyPassword>testing</keyPassword>
      </connector>
    </connectors>
    <requestLog implementation="ch.qos.logback.access.jetty.RequestLogImpl">
      <fileName>src/main/jetty/logback-access.xml</fileName>
    </requestLog>
  </configuration>
  <dependencies>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>jcl104-over-slf4j</artifactId>
      <version>${slf4jVersion}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <version>${commonsLoggingVersion}</version>
      <scope>provided</scope>
      <exclusions>
        <exclusion>
          <groupId>javax.servlet</groupId>
          <artifactId>servlet-api</artifactId>
        </exclusion>
        <exclusion>
          <groupId>logkit</groupId>
          <artifactId>logkit</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>log4j-over-slf4j</artifactId>
      <version>${slf4jVersion}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <version>${log4jVersion}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-core</artifactId>
      <version>${logbackVersion}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${logbackVersion}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-access</artifactId>
      <version>${logbackVersion}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>janino</groupId>
      <artifactId>janino</artifactId>
      <version>2.4.3</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>de.huxhorn.lilith</groupId>
      <artifactId>de.huxhorn.lilith.logback.appender.multiplex-access</artifactId>
      <version>${pom.version}</version>
      <scope>runtime</scope>
    </dependency>
  </dependencies>
</plugin>]]></tt></pre>


<p>Then, put the following into <tt>src/main/jetty/logback-access.xml</tt> file:</p>
		<pre><tt><![CDATA[<configuration>
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <layout class="ch.qos.logback.access.PatternLayout">
      <Pattern>combined</Pattern>
    </layout>
  </appender>
  <appender name="multiplex" class="de.huxhorn.lilith.logback.appender.AccessMultiplexSocketAppender">
    <Compressing>true</Compressing> <!-- will automatically use correct default port -->
    <ReconnectionDelay>30000</ReconnectionDelay>
    <RemoteHosts>localhost</RemoteHosts>
  </appender>

  <appender-ref ref="STDOUT" />
  <appender-ref ref="multiplex" />
</configuration>]]></tt></pre>

<p><a href="#top">Back to top.</a></p>
</body>
</html>